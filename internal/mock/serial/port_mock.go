// Code generated by MockGen. DO NOT EDIT.
// Source: go.bug.st/serial (interfaces: Port)
//
// Generated by this command:
//
//	mockgen -destination=serial/port_mock.go -package=serial_test go.bug.st/serial Port
//

// Package serial_test is a generated GoMock package.
package serial_test

import (
	reflect "reflect"
	time "time"

	serial "go.bug.st/serial"
	gomock "go.uber.org/mock/gomock"
)

// MockPort is a mock of Port interface.
type MockPort struct {
	ctrl     *gomock.Controller
	recorder *MockPortMockRecorder
	isgomock struct{}
}

// MockPortMockRecorder is the mock recorder for MockPort.
type MockPortMockRecorder struct {
	mock *MockPort
}

// NewMockPort creates a new mock instance.
func NewMockPort(ctrl *gomock.Controller) *MockPort {
	mock := &MockPort{ctrl: ctrl}
	mock.recorder = &MockPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPort) EXPECT() *MockPortMockRecorder {
	return m.recorder
}

// Break mocks base method.
func (m *MockPort) Break(arg0 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Break", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Break indicates an expected call of Break.
func (mr *MockPortMockRecorder) Break(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Break", reflect.TypeOf((*MockPort)(nil).Break), arg0)
}

// Close mocks base method.
func (m *MockPort) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockPortMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPort)(nil).Close))
}

// Drain mocks base method.
func (m *MockPort) Drain() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Drain")
	ret0, _ := ret[0].(error)
	return ret0
}

// Drain indicates an expected call of Drain.
func (mr *MockPortMockRecorder) Drain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Drain", reflect.TypeOf((*MockPort)(nil).Drain))
}

// GetModemStatusBits mocks base method.
func (m *MockPort) GetModemStatusBits() (*serial.ModemStatusBits, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModemStatusBits")
	ret0, _ := ret[0].(*serial.ModemStatusBits)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModemStatusBits indicates an expected call of GetModemStatusBits.
func (mr *MockPortMockRecorder) GetModemStatusBits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModemStatusBits", reflect.TypeOf((*MockPort)(nil).GetModemStatusBits))
}

// Read mocks base method.
func (m *MockPort) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockPortMockRecorder) Read(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockPort)(nil).Read), p)
}

// ResetInputBuffer mocks base method.
func (m *MockPort) ResetInputBuffer() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetInputBuffer")
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetInputBuffer indicates an expected call of ResetInputBuffer.
func (mr *MockPortMockRecorder) ResetInputBuffer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetInputBuffer", reflect.TypeOf((*MockPort)(nil).ResetInputBuffer))
}

// ResetOutputBuffer mocks base method.
func (m *MockPort) ResetOutputBuffer() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetOutputBuffer")
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetOutputBuffer indicates an expected call of ResetOutputBuffer.
func (mr *MockPortMockRecorder) ResetOutputBuffer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetOutputBuffer", reflect.TypeOf((*MockPort)(nil).ResetOutputBuffer))
}

// SetDTR mocks base method.
func (m *MockPort) SetDTR(dtr bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDTR", dtr)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDTR indicates an expected call of SetDTR.
func (mr *MockPortMockRecorder) SetDTR(dtr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDTR", reflect.TypeOf((*MockPort)(nil).SetDTR), dtr)
}

// SetMode mocks base method.
func (m *MockPort) SetMode(mode *serial.Mode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMode", mode)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMode indicates an expected call of SetMode.
func (mr *MockPortMockRecorder) SetMode(mode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMode", reflect.TypeOf((*MockPort)(nil).SetMode), mode)
}

// SetRTS mocks base method.
func (m *MockPort) SetRTS(rts bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRTS", rts)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRTS indicates an expected call of SetRTS.
func (mr *MockPortMockRecorder) SetRTS(rts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRTS", reflect.TypeOf((*MockPort)(nil).SetRTS), rts)
}

// SetReadTimeout mocks base method.
func (m *MockPort) SetReadTimeout(t time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReadTimeout", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReadTimeout indicates an expected call of SetReadTimeout.
func (mr *MockPortMockRecorder) SetReadTimeout(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadTimeout", reflect.TypeOf((*MockPort)(nil).SetReadTimeout), t)
}

// Write mocks base method.
func (m *MockPort) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockPortMockRecorder) Write(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockPort)(nil).Write), p)
}
